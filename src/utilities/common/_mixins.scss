@charset 'utf-8';

///
// Core utilities mixins
///

@use 'variables' as *;
@use 'functions' as *;
@use 'sass:meta';
@use 'sass:string';

///
/// Remove all styles for link component
///
@mixin unstyled-link {
  color: inherit;
  cursor: inherit;
  text-decoration: inherit;

  &:active, &:focus {
    outline: none;
  }
}

///
/// Includes a keyword z-index or a number
/// TODO: pensar em remover em favor de apenas css vars
/// @require {Function} z-index
///
/// @param {String} $index
///
@mixin z($index: default) {
  z-index: z-index($index);
}

///
/// includes a opacity level
///
/// @requires {Function} opacity
///
/// @param {String} $level - opacity level
///
@mixin opacity($level) {
  opacity: opacity-level($level);
}

///
/// fill the full component relative to parent
/// @output height and width with 100%
///
@mixin full-content {
  height: 100%;
  width: 100%;
}

///
/// Fill the component dimensions with whole parent height and width
/// @output height and width with 100vw(vh)
///
@mixin full-viewport {
  height: 100vh;
  width: 100vw;
}

///
/// For each component scales returns its value
///
/// @requires {Map} $component-scales
/// @requires {Function} component-scale
///
@mixin component-scale() {
  @each $name, $scale in $component-scales {
    @content($name);
  }
}

///
/// Resets all style for select html element
///
///
@mixin select-reset {
  select {
    appearance: none;
    border-style: none;
    text-decoration: none;
  }

  select::-ms-expand {
    display: none;
  }
}

///
/// Mixin to prefix several properties at once
///
/// @see https://css-tricks.com/snippets/sass/mixin-prefix-properties/
/// @param {Map} $declarations - Declarations to prefix
/// @param {List} $prefixes (()) - List of prefixes to print
///
@mixin prefix($declarations, $prefixes: (webkit moz ms o)) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard non-prefixed declaration
    #{$property}: $value;
  }
}

///
/// @see https://css-tricks.com/snippets/sass/custom-scrollbars-mixin/
/// @param {Number} $size
/// @param {Color} $foreground-color
/// @param {Color} $background-color (())
///
@mixin scrollbars($size, $foreground-color,
  $background-color: mix($foreground-color, white,  50%)) {
  scrollbar-face-color: $foreground-color;
  scrollbar-track-color: $background-color;

  // For Google Chrome
  &::-webkit-scrollbar {
    height: $size;
    width:  $size;
  }

  &::-webkit-scrollbar-thumb {
    background: $foreground-color;
  }

  &::-webkit-scrollbar-track {
    background: $background-color;
  }
}

///
/// Define css custom properties from map structure
///   Take a map data structure and convert to css custom properties with
/// a optional prefix. Also the css vars can be set to any selector, if there's
/// none the :root is used by default
///
/// @content Pass the variable and its value as the first and second argument
///           respectively only if a content exists
/// @example
///   set-vars((gray-1: #ccc), color) => --color-gray-1: #ccc
///   set-vars((gray-1: #ccc))        => --gray-1: #ccc
///
/// @output A list of prefixed css custom properties
/// @param {Map} $vars - A map to construct the custom properties
/// @param {String} $prefix - A custom property property
///
@mixin css-vars($vars, $prefix: '') {
  @if not (meta.type-of($vars) == 'map') {
    @error "You must supply a map to create CSS custom properties instead the value #{$vars}";
  }

  #{if(&, '&', ':root')} {
    @each $variable, $property in $vars {
      $var-prefix: if(string.length($prefix) == 0, '', "#{$prefix}-");
      $custom-property: --#{$var-prefix}#{$variable};

      @if meta.content-exists() {
        @content($custom-property, $property);
      } @else {
        #{$custom-property}: #{$property};
      }
    }
  }
}
