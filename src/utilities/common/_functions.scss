@charset 'utf-8';

///
// Defines all functions to access variables or which can be reuse or
//   facilitates code
///

@use 'sass:map';
@use 'sass:math';
@use 'variables' as *;

///
/// Get a value from generic map throwing error if exists
///
/// @throw Not found map variable
/// @throw Not found map value
/// @access private
///
/// @param {Map} $map - map to be search on
/// @param {String} $layer - map key
///
@function read-map($map, $layer) {
  @if type-of($map) != "map" {
    @error "Map #{$map} must be defined";
  }

  @if not map.has-key($map, $layer) {
    @warn "No value found for \'#{$layer}\'. Please make sure to define the key #{$layer} in map: #{$map}";
  }

  @return map.get($map, $layer);
}

///
/// Gets a numeric value or read the map value
/// There's function which can returns a numeric (and maybe other types) value
/// or read the the layer from the map
///
/// @access private
/// @requires {Function} read-map
///
/// @param {Map} $map
/// @param {String|Number} $layer
///
@function read-number-map($map, $layer) {
  @return if(type-of($layer) == "number", $layer, read-map($map, $layer));
}

///
/// Get breakpoint by its name on map structure defined in variables/
///
/// @todo check other units or conversions
///
/// @requires {Map} $breakpoins
/// @requires {function} read-number-map
///
/// @param {String} $name - breakpoint name
/// @return {Number}
///
@function breakpoints($name) {
  @return read-number-map($breakpoints, $name);
}

///
/// Gets a component scale factor from its map or a number
///
/// @requires {Map} $component-scales
/// @requires {Function} read-number-map
///
/// @param {String | Number} $scale [default] - number or string of scale
/// @return {Number}
///
@function component-scale($scale: default) {
  @return read-number-map($component-scales, $scale);
}

///
/// Gets a z-index number or read its named map
///
/// @requires {Map} $z-indexes
///
/// @param {String|Number} $index [default] z-index keyword or nmber
/// @return {Number}
///
@function z-index($index: default) {
  @return read-number-map($z-indexes, $index);
}

///
/// Gets a opacity level from map object or gets a literal number
///
/// @requires {Map} $opacity-levels
/// @requires {Function} read-number-map
///
/// @param {String | number} $level [active] - opacity level or number
/// @return {number}
///
@function opacity-level($level: active) {
  @return read-number-map($opacity-levels, $level);
}

///
/// Converts pixel unit to rem
///
/// @requires {Number} $browser-context
///
/// @param {Number} $pixels
/// @param {Number} $context [$browser-context]
/// @return {Number}
///
@function rem($pixels, $context: $browser-context) {
  @if unitless($pixels) {
    $pixels: $pixels * 1px;
  }

  @if unitless($context) {
    $context: $context * 1px;
  }

  @return math.div($pixels, $context) * 1rem;
}
