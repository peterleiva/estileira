@charset 'utf-8';

////
/// This file describe a icon component
///
////

@use '../utilities' as *;
@use 'sass:math';
@use 'sass:meta';

// 2 lines as a default icon size
$icon-size: rhythm-baseline-scale(2);

///
/// Basic icon required structure. The proportion is square
///
%icon {
  --size: #{$icon-size};
  cursor: pointer;
  width: var(--size);
  height: var(--size);
}

///
/// Sets icon size using height and width
/// Uses one of keyword component (sm, lg, jumbo, default, ...) or a length in
///   pixel or rem to calculate the component height and width. Also fill the 
///   remaining size with padding to keep the vertical rhythm
///
/// @throw When the $size isn't px, rem or one of component strings
/// @output icon width, height and padding to keep rhythm
/// @param {Number | String} $size [$icon-size] - Component size in pixel or 
///                                                a string
///
@mixin icon($size: $icon-size) {
  $scale: $size;
  @if meta.type-of($size) == 'string' {
    $scale: rhythm-baseline-scale(component-scale($size));
  } @else {
    @if math.unit($size) == 'px' {
      $scale: rem($size);
    } @else if math.unit($size) != 'rem' {
      @error "Icon size must be pixel, rem or component string";
    }
  }

  // keep the size as the minimium required line to maintain the rhythm 
  --size: #{rhythm-leading($scale)};
  @extend %icon;

  // fill with padding the extra to keep rhythm
  padding: calc((var(--size) - #{$scale})/2);
}

