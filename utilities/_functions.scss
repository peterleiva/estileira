////
/// Defines all functions to access variables or which can be reuse or
/// facilitates code
///
////

///
/// Get value from generic map
///
/// @throw Not found map variable
/// @throw Not found map value
/// @access private
///
/// @param {Map} $map - map which search values
/// @param {String} $layer - value to be readed
@function read-map($map, $layer) {
  @if (type-of($map) != 'map') or (type-of($layer) == null) {
    @error "Map #{$map} and layer #{$layer} must be defined";
  }

  @if map-has-key($map, $layer) {
    @return map-get($map, $layer);
  } @else {
    @error "No value found for \'#{$layer}\'. Please make sure you defined in " +
        "\'#{$map}\'";
  }
}

/// Get breakpoint value by its key name on map
///
/// @param {String} $layer - layer name
/// @return {String}
/// @requires $breakpoints-names
@function get-breakpoint($breakpoint) {
  @return rem(read-map($breakpoint-names, $breakpoint));
}

/// Gets a size from map
/// @access public
/// @param {String} $layer - layer name
/// @return {number}
/// @require {Map} $component-size
@function size($layer: base) {
  @return read-map($component-size, $layer);
}

///
/// Gets a opacity level from map object or gets a literal number
///
/// @param {String | number} $level [active] - opacity level
/// @return {number}
/// @requires $opacity-levels
@function opacity($level: active) {
  @return if(type-of($level) == 'number', $level, read-map($opacity-levels, $level));
}

///
/// Converts pixels unit to rem
///
/// @param {Number} $pixels
/// @param {Number} $context [$browser-context]
/// @return {Number}
/// @require {Number} $browser-context
///
@function rem($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1rem;
}
