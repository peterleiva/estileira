////
/// Defines all functions to access variables or which can be reuse or
/// facilitates code
///
////

/// Get value from generic map
/// @access private
/// @param {Map} $map - map name to be search for
/// @param {String} $layer - value to be readed from
@function read-map($map, $layer) {
  @if (type-of($map) == null) or (type-of($layer) == null) {
    @error 'Map #{map} and layer #{layer} must be defined';
  }

  @if map-has-key($map, $layer) {
    @return map-get($map, $layer);
  } @else {
    @error "No value found for \'#{$layer}\'. Please make sure you defined in " +
        "\'$#{map}\' map.";
  }
}


/// Get breakpoint value by its key name on map
/// @access public
/// @param {String} $layer - layer name
/// @return {String}
/// @require $breakpoints
@function breakpoint-name($breakpoint) {
  @return read-map($breakpoints, $breakpoint);
}

/// Gets a size from map
/// @access public
/// @param {String} $layer - layer name
/// @return {number}
/// @require {Map} $component-size
@function size($layer: base) {
  @return read-map($component-size, $layer);
}

///
/// Gets a opacity level from map object or gets a literal number
///
/// @param {String | number} $level [active] - opacity level
/// @return {number}
/// @requires $opacity-levels
@function opacity($level: active) {
  @return if(type-of($level) == 'number', $level, read-map($opacity-levels, $level));
}

///
/// Calculates the length of lines according
///
/// The lines is based on ratio defined by the user. The vertical rhythm
/// library defines a root html element which is where all font-size, line
/// is referenced by. So the calculation is converted to rem so can use
/// this font-size of root as reference
/// @access public
/// @param {Number} $lines [1] - lines to be calculated
/// @return {Number} - tamanho da linha em rem
/// @requires $baseratio
///
@function measure-lines-rhythm($lines: 1) {
  @return $lines * $baseratio * 1rem;
}

///
/// Calculates the amount of lines required to mantain the rhythm
///
/// @access private
/// @param {Number} $basesize [$basesize] - font-size in rem
/// @return {Number}
///
@function lines-required($font-size: $basesize) {
  @if unit($font-size) != 'rem' {
    @warn 'The unit for `lines-required` should be `rem`';
  }

  @return ceil($font-size/measure-lines-rhythm());
}

///
/// Converts pixels unit to em to use vertical rhythm functions
/// @access public
/// @param {Number} $pixels
/// @param {Number} $context [$basesize] - context which will be converted to
/// @return {Number}
/// @require $basesize
///
@function rem($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1rem;
}
