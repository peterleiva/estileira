////
/// This file describe functions get colors from map or manipulate new ones
///
////

@use 'variables' as *;
@use '../common/functions' as *;

///
/// Gets a colors applying some tint or shade or opactity
///
///  Choose a color by its name, applies opacity and tint/shade to create variants
/// Based on @link https://scotch.io/tutorials/aesthetic-sass-2-colors
///
///  Cada cor usada pelo projeto possui um nome por isso a função usa as
/// variáveis globais da paleta de cores definida no partials 'base/_variables'.
/// A função também aplica um nível de transparência definido para a plicação
/// seguindo o mapa definido em $opacity-levels, que pode ser encontrado em
/// 'base/_variables'. Por final aplica uma mistura de preto ou branco de acordo
/// com um pkercentual definido nas variáveis por intervalos discretos.
///
/// @example
///   pick(primary, $level: -10, $opacity: active-icon);
///
/// @requires {Map} $colors
/// @requires {Number} $variant-interval
/// @requires {function} opacity-level
/// @requires {function} read-map
///
/// @param {String | Color} $color-name [primary] - color name
/// @param {Number} $level [0] - applies tint or shade depending on percentage
/// @param {Number | String} $opacity [active] - opacity level
/// @return {Color}
///
@function pick($color-name: primary, $level: 0, $opacity: active) {

  // check the $color-nakme type, it can return a single color
  $color: if(type-of($color-name) == 'color',
                  $color-name, read-map($colors, $color-name));

  // base color used for mixing tint or shade
  $color-base: if($level < 0, #fff, #000);

  // level is negative if base color is black
  $level: if($level < 0, -$level, $level);

  // gets the opacity level from map or use a number value
  $alpha: opacity-level($opacity);

  @if $color != transparent {
    $color: rgba($color, $alpha);
  }

  // applies tint or shade according to $level
  $color: mix($color-base, $color, $level * $variant-interval);

  @return $color;
}

///
/// Gets a color variant from spectrum
///
/// @requires {Map} $variants
/// @requires {Function} pick
/// @requires {Function} read-map
///
/// @param {String} $color
/// @param {String} $variant
/// @returns {Color}
///
@function variant($color: 'primary-1', $variant: 'base', $opacity: active) {
  $color-spectrum: read-map($variants, $color);

  @if $color-spectrum {
    $variant: pick(read-map($color-spectrum, $variant), $opacity: $opacity);
  }

  @return $variant;
}

///
/// Gets a gradient color mapped by a name
///
/// @requires {Map} $gradients
///
/// @param {String} $color [background-1]
///
@function gradient($color: 'background-1') {
  @return read-map($gradients, $color);
}

///
/// Applies a fixed amount of tint to color
///
/// @requires {function} pick
///
/// @param {Color} $color [primary] - color to be tinted
/// @returns {Color}
///
@function lighter($color: primary) {
  @return pick($color, -4);
}

///
/// Applies a fixed amount of tint to color
///
/// @requires {function} pick
///
/// @param {Color} $color [primary] - color to be tinted
/// @returns {Color}
///
@function light($color: primary) {
  @return pick($color, -2);
}

///
/// Applies a fixed amount of shade to color
///
/// @requires {function} pick
///
/// @param {Color} $color [primary] - color to be shaded
/// @returns {Color}
///
@function dark($color: primary) {
  @return pick($color, 2);
}

///
/// Applies a fixed amount of shade to color
///
/// @requires {function} pick
///
/// @param {Color} $color [primary] - color to be shaded
/// @returns {Color}
///
@function darker($color: primary) {
  @return pick($color, 4);
}

///
/// Gets the contrast color for foreground to a given color
///
/// @requires {function} pick
/// @requires {function} gray
///
/// @param {String | Color} $color [brand] - color to get the contrast
/// @param {Number} $threshold [65] - lightness limit
/// @returns {Color}
///
@function contrast($color: brand, $threshold: 65) {
  @return if(lightness(pick($color)) > $threshold, gray(dark), gray(light));
}

///
/// Calculates the colors diff between two colors
///
/// @param {Color} $a - base color
/// @param {Color} $b - color which is diff
/// @returns {Map} - A map to functions to be applies to get $a from $b
///
@function diff($a, $b) {
  $sat: saturation($a) - saturation($b);
  $lightness: lightness($a) - lightness($b);

  $fn-sat: if($sat > 0, 'desaturate', 'saturate');
  $lig-color: if($lightness > 0, #000, #fff);

  @return (
    adjust-hue: -(hue($a) - hue($b)),
    #{fn-sat}: abs($sat),
    mix: $lig-color
  );
}

///
/// Applies a diff to a color to obtain its variant
///
/// @param {Color} $color - color to be applies the difference
/// @param {Map} $diff-map - a map to functions to applies the diff on color
/// @returns {Color} color diff applied
///
@function apply-diff($color, $diff-map) {

  @each $fun, $value in $diff-map {
    $color: call($fun, $color, $value);
  }

  @return $color;
}

///
/// Gets a grayscale color from its map with optional opacity
///
/// @requires {Map} $grayscale - grayscale map
/// @requires {function} read-map
/// @requires {pick} pick
///
/// @param {String} $gray - grayscale color name
/// @param {String} $opacity [active] - opacity level defind on variables
///
@function gray($gray, $opacity: active) {
  @return pick(read-map($grayscale, $gray), $opacity: $opacity);
}
