////
/// This file describe mixins for mantain vertical rhythm
///
/// TODO mudar nome dos mixins
/// IDEA rearquitear ritmo vertical para um ou mais módulos
////

@use 'variables' as *;
@use 'functions' as *;
@use '../common';

///
/// Configures the app to accept vertical rhythm framework
///
///
@mixin bootstrap() {
  body {
    @include type-setting;
  }

  *, *:after, *:before {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
  }
}

///
/// Adjust the component calculating leading to mantain the rhythm
///
/// Calculate the leading of font-size and only sets a unitless value based
/// TODO usar line-height sem unidade
///
/// @requires {function} baseline-scale - calculate the line length
///                                               required
/// @requires {Function} leading
/// @requires {Number} $basesize
///
/// @param {Number} $font-size [$basesize]
///
@mixin type-setting($font-size: $basesize) {
  font-size: $font-size;
  line-height: leading($font-size);
}

///
/// Scale a type mantaining vertical rhythm using modular scale
/// Uses a defined scale name in $type-scale or uses a number to be scale to
/// both of them using ms function
///
/// @requires {Map} $type-scale - scale naming map
/// @requires {Function} common.component-scale - scale naming map
/// @requires {Function} type-setting - scale naming map
/// @requires {function} ms - from modular scale library
///
/// @param {Number | String} $scale - a scale or keyword defined by $type-scale
@mixin type-scale($scale: 0) {
  $text-size: ms(common.component-scale($scale));

  @include type-setting($text-size);
}

///
/// Apply vertical rhythm using padding list syntax
/// The rhythm is mantained calculating the lines required for each item list
///
/// @example
///   padding-rhythm(10 3 4 5)
///   padding-rhythm(10 5)
/// @param {List} $direction [()] - directions to be applied
///
@mixin padding($sides: ()) {
  @include _list-sides($sides) using ($pads) {
    padding: $pads;
  }
}

///
/// Applies rhythm for single padding side
///
/// @requires {function} _side
///
@mixin padding-side($side, $lines: 1) {
  @include _side-baseline('padding', $side, $lines);
}

///
/// Maintain vertical rhythm applying margins using its list syntax
/// The rhythm is mantained calculating the lines required for each item list
///
/// @example
///   margin-rhythm(10 3 4 5)
///   margin-rhythm(10 5)
///
/// @param {List} $direction [()] - pad direction to be applied
///
@mixin margin($sides: ()) {
  @include _list-sides($sides) using ($margins) {
    margin: $margins;
  }
}

///
/// Applies rhythm for single margin side
///
/// @requires {function} _side
///
@mixin margin-side($side, $lines: 1) {
  @include _side-baseline('margin', $side, $lines);
}

///
/// Applies border to component keeping the vertical rhythm
/// The rhythm is mantained for each of four border width. Padding is added
/// calculating the leftover between the border with and the next baseline
///
/// @param {List} $sides [()] - borders side which applies the rhythm
/// @requires {function} padding-rhythm
/// @requires {function} leading
///
@mixin border($sides: ()) {
  $pads: ();

  @include _list-sides using ($borders) {
    border-width: $borders;

    @each $border in $borders {
      $pads: append($pads, leading($border) - $border);
    }

    @include padding-rhythm($pads);
  }
}


///
/// Calculates the single side line of margin or border property
///
/// @access private
/// @requires {function} baseline-scale
/// @requires {List} common.$sides
///
/// @param {margin|padding} $property - property to be applies
/// @param {top|bottom|left|right} $side - side of property to be applies
/// @param {Number} $lines [1]
///
@mixin _side-baseline($property, $side, $lines: 1) {
  @if index(common.$sides, $side) == null {
    @error "Property #{$side} must be in #{common.$sides}";
  }

  $properties: ('margin' 'padding');

  @if index($properties, $property) == null {
    @error "Property #{$property} must be in #{$properties}";
  }

  #{$property}-#{$side}: baseline-scale($lines);
}

///
/// Each direction calculates the line required for a list of
///
/// @throws error in case the list is empty
/// @access private
/// @requires {function} list-baseline
///
/// @param {List} $sides
///
@mixin _list-sides($sides: ()) {
  @if length($sides) == 0 {
    @error "List shouldn't be empty";
  }

  @content(list-baseline($sides...));
}

///
/// Applies rhythm for single padding side
///
/// @requires {function} baseline-scale
/// @requires {function} padding-_side
/// @requires {function} leading
///
@mixin border-side($side, $width) {
  $border-width: baseline-scale($width);
  $padding: leading($border-width) - $border-width;

  border-width-#{$side}: $border-width;

  @if $padding > 0 {
    @include padding-side($side, $padding);
  }
}

///
/// Aplica vertical rhythm to component
///
/// @example
///   a {
///     @include vertical-rhythm(1.2rem, $use-height: true, $bottom-rows: 1);
///   }
///
//// @access public
/// @param {$font-size} - Tamanho do elemento
///
// @mixin vertical-rhythm($font-size: $basesize){
//
//   // quantidade de linhas necessárias para o tamanho da letra
//   $min-lines: lines-required($font-size);
//
//   // altura que o elemento ocupa
//   $component-height: line-rhythm($min-lines);
//
//   // altura, em rem, do container
//   $height: line-rhythm(ceil($min-lines));
//
//   @if $use-height {
//     // sobras para que o elemento ocupe o número inteiro de linhas verticais
//     $leftover: $height - $component-height;
//     $pad: $leftover/2;
//     height: $component-height;
//     width: $component-height;
//     margin-top: $pad;
//     margin-bottom:$pad;
//   }
// }
